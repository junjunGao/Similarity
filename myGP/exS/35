	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp3:
	.cfi_def_cfa_offset 16
Ltmp4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp5:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
Ltmp6:
	.cfi_offset %rbx, -24
	leaq	L_.str(%rip), %rdi
	leaq	-28(%rbp), %rsi
	leaq	-32(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	L_main.m(%rip), %rax
	movabsq	$52, %r8
	leaq	-96(%rbp), %r9
	movq	___stack_chk_guard@GOTPCREL(%rip), %r10
	movq	(%r10), %r10
	movq	%r10, -16(%rbp)
	movl	$0, -20(%rbp)
	movq	%rdi, -112(%rbp)        ## 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, -120(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -128(%rbp)        ## 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -136(%rbp)        ## 8-byte Spill
	callq	_memcpy
	movl	$0, -24(%rbp)
	movq	-112(%rbp), %rdi        ## 8-byte Reload
	movq	-120(%rbp), %rsi        ## 8-byte Reload
	movq	-128(%rbp), %rdx        ## 8-byte Reload
	movq	-136(%rbp), %rcx        ## 8-byte Reload
	movb	$0, %al
	callq	_scanf
	movl	-36(%rbp), %r11d
	movl	-24(%rbp), %ebx
	addl	%r11d, %ebx
	movl	%ebx, -24(%rbp)
	movl	$1, -100(%rbp)
	movl	%eax, -140(%rbp)        ## 4-byte Spill
LBB0_1:                                 ## =>This Inner Loop Header: Depth=1
	movl	-100(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	LBB0_4
## BB#2:                                ##   in Loop: Header=BB0_1 Depth=1
	movl	-24(%rbp), %eax
	movslq	-100(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movl	%eax, -24(%rbp)
## BB#3:                                ##   in Loop: Header=BB0_1 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	LBB0_1
LBB0_4:
	cmpl	$2, -32(%rbp)
	jle	LBB0_10
## BB#5:
	movl	$4, %eax
	movl	-28(%rbp), %ecx
	movl	%eax, -144(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-144(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_7
## BB#6:
	movl	$100, %eax
	movl	-28(%rbp), %ecx
	movl	%eax, -148(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-148(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_8
LBB0_7:
	movl	$400, %eax              ## imm = 0x190
	movl	-28(%rbp), %ecx
	movl	%eax, -152(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-152(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_9
LBB0_8:
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
LBB0_9:
	jmp	LBB0_10
LBB0_10:
	leaq	L_.str1(%rip), %rdi
	movl	-24(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	cmpq	-16(%rbp), %rdi
	movl	%eax, -156(%rbp)        ## 4-byte Spill
	jne	LBB0_12
## BB#11:                               ## %SP_return
	movl	$0, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	ret
LBB0_12:                                ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__const
	.align	4                       ## @main.m
L_main.m:
	.long	0                       ## 0x0
	.long	31                      ## 0x1f
	.long	28                      ## 0x1c
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d %d %d"

L_.str1:                                ## @.str1
	.asciz	"%d"


.subsections_via_symbols
