	.section	__TEXT,__text,regular,pure_instructions
	.globl	_judge
	.align	4, 0x90
_judge:                                 ## @judge
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	movl	$100, %eax
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %edi
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	movl	%edi, %eax
	cltd
	movl	-12(%rbp), %edi         ## 4-byte Reload
	idivl	%edi
	cmpl	$0, %edx
	jne	LBB0_2
## BB#1:
	movl	$4, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -16(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-16(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	je	LBB0_4
LBB0_2:
	movl	$100, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-20(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	je	LBB0_5
## BB#3:
	movl	$4, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-24(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_5
LBB0_4:
	movl	$1, -4(%rbp)
	jmp	LBB0_6
LBB0_5:
	movl	$0, -4(%rbp)
LBB0_6:
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.cfi_endproc

	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp7:
	.cfi_def_cfa_offset 16
Ltmp8:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp9:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	L_.str(%rip), %rdi
	leaq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	leaq	-16(%rbp), %rcx
	movl	$0, -4(%rbp)
	movb	$0, %al
	callq	_scanf
	cmpl	$1, -12(%rbp)
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	jne	LBB1_2
## BB#1:
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
LBB1_2:
	cmpl	$2, -12(%rbp)
	jne	LBB1_4
## BB#3:
	movl	-16(%rbp), %eax
	addl	$31, %eax
	movl	%eax, -20(%rbp)
LBB1_4:
	movl	-8(%rbp), %edi
	callq	_judge
	cmpl	$1, %eax
	jne	LBB1_26
## BB#5:
	cmpl	$3, -12(%rbp)
	jne	LBB1_7
## BB#6:
	movl	-16(%rbp), %eax
	addl	$60, %eax
	movl	%eax, -20(%rbp)
LBB1_7:
	cmpl	$4, -12(%rbp)
	jne	LBB1_9
## BB#8:
	movl	-16(%rbp), %eax
	addl	$91, %eax
	movl	%eax, -20(%rbp)
LBB1_9:
	cmpl	$5, -12(%rbp)
	jne	LBB1_11
## BB#10:
	movl	-16(%rbp), %eax
	addl	$121, %eax
	movl	%eax, -20(%rbp)
LBB1_11:
	cmpl	$6, -12(%rbp)
	jne	LBB1_13
## BB#12:
	movl	-16(%rbp), %eax
	addl	$152, %eax
	movl	%eax, -20(%rbp)
LBB1_13:
	cmpl	$7, -12(%rbp)
	jne	LBB1_15
## BB#14:
	movl	-16(%rbp), %eax
	addl	$182, %eax
	movl	%eax, -20(%rbp)
LBB1_15:
	cmpl	$8, -12(%rbp)
	jne	LBB1_17
## BB#16:
	movl	-16(%rbp), %eax
	addl	$213, %eax
	movl	%eax, -20(%rbp)
LBB1_17:
	cmpl	$9, -12(%rbp)
	jne	LBB1_19
## BB#18:
	movl	-16(%rbp), %eax
	addl	$244, %eax
	movl	%eax, -20(%rbp)
LBB1_19:
	cmpl	$10, -12(%rbp)
	jne	LBB1_21
## BB#20:
	movl	-16(%rbp), %eax
	addl	$274, %eax              ## imm = 0x112
	movl	%eax, -20(%rbp)
LBB1_21:
	cmpl	$11, -12(%rbp)
	jne	LBB1_23
## BB#22:
	movl	-16(%rbp), %eax
	addl	$305, %eax              ## imm = 0x131
	movl	%eax, -20(%rbp)
LBB1_23:
	cmpl	$12, -12(%rbp)
	jne	LBB1_25
## BB#24:
	movl	-16(%rbp), %eax
	addl	$335, %eax              ## imm = 0x14F
	movl	%eax, -20(%rbp)
LBB1_25:
	jmp	LBB1_26
LBB1_26:
	leaq	L_.str1(%rip), %rdi
	movl	-20(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	$0, %esi
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	movl	%esi, %eax
	addq	$32, %rsp
	popq	%rbp
	ret
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d%d%d"

L_.str1:                                ## @.str1
	.asciz	"%d"


.subsections_via_symbols
