	.section	__TEXT,__text,regular,pure_instructions
	.globl	_leapyear
	.align	4, 0x90
_leapyear:                              ## @leapyear
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	movl	$400, %eax              ## imm = 0x190
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %edi
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	movl	%edi, %eax
	cltd
	movl	-12(%rbp), %edi         ## 4-byte Reload
	idivl	%edi
	cmpl	$0, %edx
	je	LBB0_3
## BB#1:
	movl	$100, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -16(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-16(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	je	LBB0_4
## BB#2:
	movl	$4, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-20(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_4
LBB0_3:
	movl	$1, -4(%rbp)
	jmp	LBB0_5
LBB0_4:
	movl	$0, -4(%rbp)
LBB0_5:
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.cfi_endproc

	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp7:
	.cfi_def_cfa_offset 16
Ltmp8:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp9:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	leaq	L_.str(%rip), %rdi
	leaq	-68(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	L_main.a(%rip), %rax
	movabsq	$48, %r8
	leaq	-64(%rbp), %r9
	movq	___stack_chk_guard@GOTPCREL(%rip), %r10
	movq	(%r10), %r10
	movq	%r10, -8(%rbp)
	movl	$0, -12(%rbp)
	movq	%rdi, -96(%rbp)         ## 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, -104(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -112(%rbp)        ## 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -120(%rbp)        ## 8-byte Spill
	callq	_memcpy
	movl	$0, -84(%rbp)
	movq	-96(%rbp), %rdi         ## 8-byte Reload
	movq	-104(%rbp), %rsi        ## 8-byte Reload
	movq	-112(%rbp), %rdx        ## 8-byte Reload
	movq	-120(%rbp), %rcx        ## 8-byte Reload
	movb	$0, %al
	callq	_scanf
	movl	-68(%rbp), %edi
	movl	%eax, -124(%rbp)        ## 4-byte Spill
	callq	_leapyear
	cmpl	$1, %eax
	jne	LBB1_2
## BB#1:
	movl	$29, -60(%rbp)
LBB1_2:
	movl	$0, -80(%rbp)
LBB1_3:                                 ## =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	LBB1_6
## BB#4:                                ##   in Loop: Header=BB1_3 Depth=1
	movl	-84(%rbp), %eax
	movslq	-80(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movl	%eax, -84(%rbp)
## BB#5:                                ##   in Loop: Header=BB1_3 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB1_3
LBB1_6:
	leaq	L_.str1(%rip), %rdi
	movl	-84(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	cmpq	-8(%rbp), %rdi
	movl	%eax, -128(%rbp)        ## 4-byte Spill
	jne	LBB1_8
## BB#7:                                ## %SP_return
	movl	$0, %eax
	addq	$128, %rsp
	popq	%rbp
	ret
LBB1_8:                                 ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__const
	.align	4                       ## @main.a
L_main.a:
	.long	31                      ## 0x1f
	.long	28                      ## 0x1c
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d %d %d"

L_.str1:                                ## @.str1
	.asciz	"%d"


.subsections_via_symbols
