	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -28(%rbp)
LBB0_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpl	$3, -28(%rbp)
	jge	LBB0_4
## BB#2:                                ##   in Loop: Header=BB0_1 Depth=1
	leaq	L_.str(%rip), %rdi
	leaq	-24(%rbp), %rax
	movslq	-28(%rbp), %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	movb	$0, %al
	callq	_scanf
	movl	%eax, -36(%rbp)         ## 4-byte Spill
## BB#3:                                ##   in Loop: Header=BB0_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB0_1
LBB0_4:
	movl	$100, %eax
	movl	-24(%rbp), %ecx
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-40(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	je	LBB0_6
## BB#5:
	movl	$4, %eax
	movl	-24(%rbp), %ecx
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-44(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	je	LBB0_7
LBB0_6:
	movl	$400, %eax              ## imm = 0x190
	movl	-24(%rbp), %ecx
	movl	%eax, -48(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-48(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_32
LBB0_7:
	cmpl	$1, -20(%rbp)
	jne	LBB0_9
## BB#8:
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
LBB0_9:
	cmpl	$2, -20(%rbp)
	jne	LBB0_11
## BB#10:
	movl	-16(%rbp), %eax
	addl	$31, %eax
	movl	%eax, -32(%rbp)
LBB0_11:
	cmpl	$3, -20(%rbp)
	jne	LBB0_13
## BB#12:
	movl	-16(%rbp), %eax
	addl	$60, %eax
	movl	%eax, -32(%rbp)
LBB0_13:
	cmpl	$4, -20(%rbp)
	jne	LBB0_15
## BB#14:
	movl	-16(%rbp), %eax
	addl	$91, %eax
	movl	%eax, -32(%rbp)
LBB0_15:
	cmpl	$5, -20(%rbp)
	jne	LBB0_17
## BB#16:
	movl	-16(%rbp), %eax
	addl	$121, %eax
	movl	%eax, -32(%rbp)
LBB0_17:
	cmpl	$6, -20(%rbp)
	jne	LBB0_19
## BB#18:
	movl	-16(%rbp), %eax
	addl	$152, %eax
	movl	%eax, -32(%rbp)
LBB0_19:
	cmpl	$7, -20(%rbp)
	jne	LBB0_21
## BB#20:
	movl	-16(%rbp), %eax
	addl	$182, %eax
	movl	%eax, -32(%rbp)
LBB0_21:
	cmpl	$8, -20(%rbp)
	jne	LBB0_23
## BB#22:
	movl	-16(%rbp), %eax
	addl	$213, %eax
	movl	%eax, -32(%rbp)
LBB0_23:
	cmpl	$9, -20(%rbp)
	jne	LBB0_25
## BB#24:
	movl	-16(%rbp), %eax
	addl	$244, %eax
	movl	%eax, -32(%rbp)
LBB0_25:
	cmpl	$10, -20(%rbp)
	jne	LBB0_27
## BB#26:
	movl	-16(%rbp), %eax
	addl	$274, %eax              ## imm = 0x112
	movl	%eax, -32(%rbp)
LBB0_27:
	cmpl	$11, -20(%rbp)
	jne	LBB0_29
## BB#28:
	movl	-16(%rbp), %eax
	addl	$305, %eax              ## imm = 0x131
	movl	%eax, -32(%rbp)
LBB0_29:
	cmpl	$12, -20(%rbp)
	jne	LBB0_31
## BB#30:
	movl	-16(%rbp), %eax
	addl	$335, %eax              ## imm = 0x14F
	movl	%eax, -32(%rbp)
LBB0_31:
	jmp	LBB0_57
LBB0_32:
	cmpl	$1, -20(%rbp)
	jne	LBB0_34
## BB#33:
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
LBB0_34:
	cmpl	$2, -20(%rbp)
	jne	LBB0_36
## BB#35:
	movl	-16(%rbp), %eax
	addl	$31, %eax
	movl	%eax, -32(%rbp)
LBB0_36:
	cmpl	$3, -20(%rbp)
	jne	LBB0_38
## BB#37:
	movl	-16(%rbp), %eax
	addl	$59, %eax
	movl	%eax, -32(%rbp)
LBB0_38:
	cmpl	$4, -20(%rbp)
	jne	LBB0_40
## BB#39:
	movl	-16(%rbp), %eax
	addl	$90, %eax
	movl	%eax, -32(%rbp)
LBB0_40:
	cmpl	$5, -20(%rbp)
	jne	LBB0_42
## BB#41:
	movl	-16(%rbp), %eax
	addl	$120, %eax
	movl	%eax, -32(%rbp)
LBB0_42:
	cmpl	$6, -20(%rbp)
	jne	LBB0_44
## BB#43:
	movl	-16(%rbp), %eax
	addl	$151, %eax
	movl	%eax, -32(%rbp)
LBB0_44:
	cmpl	$7, -20(%rbp)
	jne	LBB0_46
## BB#45:
	movl	-16(%rbp), %eax
	addl	$181, %eax
	movl	%eax, -32(%rbp)
LBB0_46:
	cmpl	$8, -20(%rbp)
	jne	LBB0_48
## BB#47:
	movl	-16(%rbp), %eax
	addl	$212, %eax
	movl	%eax, -32(%rbp)
LBB0_48:
	cmpl	$9, -20(%rbp)
	jne	LBB0_50
## BB#49:
	movl	-16(%rbp), %eax
	addl	$243, %eax
	movl	%eax, -32(%rbp)
LBB0_50:
	cmpl	$10, -20(%rbp)
	jne	LBB0_52
## BB#51:
	movl	-16(%rbp), %eax
	addl	$273, %eax              ## imm = 0x111
	movl	%eax, -32(%rbp)
LBB0_52:
	cmpl	$11, -20(%rbp)
	jne	LBB0_54
## BB#53:
	movl	-16(%rbp), %eax
	addl	$304, %eax              ## imm = 0x130
	movl	%eax, -32(%rbp)
LBB0_54:
	cmpl	$12, -20(%rbp)
	jne	LBB0_56
## BB#55:
	movl	-16(%rbp), %eax
	addl	$334, %eax              ## imm = 0x14E
	movl	%eax, -32(%rbp)
LBB0_56:
	jmp	LBB0_57
LBB0_57:
	leaq	L_.str(%rip), %rdi
	movl	-32(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	cmpq	-8(%rbp), %rdi
	movl	%eax, -52(%rbp)         ## 4-byte Spill
	jne	LBB0_59
## BB#58:                               ## %SP_return
	movl	$0, %eax
	addq	$64, %rsp
	popq	%rbp
	ret
LBB0_59:                                ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d"


.subsections_via_symbols
