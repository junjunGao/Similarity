	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp3:
	.cfi_def_cfa_offset 16
Ltmp4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp5:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
Ltmp6:
	.cfi_offset %rbx, -24
	leaq	L_.str(%rip), %rdi
	leaq	-24(%rbp), %rsi
	leaq	-28(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	leaq	L_main.b(%rip), %rax
	movabsq	$48, %r8
	leaq	-144(%rbp), %r9
	leaq	L_main.a(%rip), %r10
	leaq	-96(%rbp), %r11
	movq	___stack_chk_guard@GOTPCREL(%rip), %rbx
	movq	(%rbx), %rbx
	movq	%rbx, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -44(%rbp)
	movq	%rdi, -152(%rbp)        ## 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -160(%rbp)        ## 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -168(%rbp)        ## 8-byte Spill
	movq	%r8, %rdx
	movq	%r9, -176(%rbp)         ## 8-byte Spill
	movq	%r8, -184(%rbp)         ## 8-byte Spill
	movq	%rax, -192(%rbp)        ## 8-byte Spill
	movq	%rcx, -200(%rbp)        ## 8-byte Spill
	callq	_memcpy
	movq	-176(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	movq	-192(%rbp), %rsi        ## 8-byte Reload
	movq	-184(%rbp), %rdx        ## 8-byte Reload
	callq	_memcpy
	movq	-152(%rbp), %rdi        ## 8-byte Reload
	movq	-160(%rbp), %rsi        ## 8-byte Reload
	movq	-168(%rbp), %rdx        ## 8-byte Reload
	movq	-200(%rbp), %rcx        ## 8-byte Reload
	movb	$0, %al
	callq	_scanf
	cmpl	$1, -28(%rbp)
	movl	%eax, -204(%rbp)        ## 4-byte Spill
	jne	LBB0_2
## BB#1:
	leaq	L_.str1(%rip), %rdi
	movl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	%eax, -208(%rbp)        ## 4-byte Spill
	jmp	LBB0_16
LBB0_2:
	movl	$4, %eax
	movl	-24(%rbp), %ecx
	movl	%eax, -212(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-212(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_4
## BB#3:
	movl	$100, %eax
	movl	-24(%rbp), %ecx
	movl	%eax, -216(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-216(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_5
LBB0_4:
	movl	$400, %eax              ## imm = 0x190
	movl	-24(%rbp), %ecx
	movl	%eax, -220(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-220(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_10
LBB0_5:
	movl	$1, -40(%rbp)
LBB0_6:                                 ## =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	LBB0_9
## BB#7:                                ##   in Loop: Header=BB0_6 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	addl	-144(%rbp,%rdx,4), %eax
	movl	%eax, -44(%rbp)
## BB#8:                                ##   in Loop: Header=BB0_6 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	LBB0_6
LBB0_9:
	leaq	L_.str1(%rip), %rdi
	movl	-44(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	%eax, -224(%rbp)        ## 4-byte Spill
	jmp	LBB0_15
LBB0_10:
	movl	$1, -40(%rbp)
LBB0_11:                                ## =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	LBB0_14
## BB#12:                               ##   in Loop: Header=BB0_11 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	addl	-96(%rbp,%rdx,4), %eax
	movl	%eax, -44(%rbp)
## BB#13:                               ##   in Loop: Header=BB0_11 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	LBB0_11
LBB0_14:
	leaq	L_.str1(%rip), %rdi
	movl	-44(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	%eax, -228(%rbp)        ## 4-byte Spill
LBB0_15:
	jmp	LBB0_16
LBB0_16:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	LBB0_18
## BB#17:                               ## %SP_return
	movl	$0, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	ret
LBB0_18:                                ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__const
	.align	4                       ## @main.a
L_main.a:
	.long	31                      ## 0x1f
	.long	28                      ## 0x1c
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.align	4                       ## @main.b
L_main.b:
	.long	31                      ## 0x1f
	.long	29                      ## 0x1d
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d %d %d"

L_.str1:                                ## @.str1
	.asciz	"%d"


.subsections_via_symbols
