	.section	__TEXT,__text,regular,pure_instructions
	.globl	_LeapYear
	.align	4, 0x90
_LeapYear:                              ## @LeapYear
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	movl	$400, %eax              ## imm = 0x190
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %edi
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	movl	%edi, %eax
	cltd
	movl	-12(%rbp), %edi         ## 4-byte Reload
	idivl	%edi
	cmpl	$0, %edx
	je	LBB0_3
## BB#1:
	movl	$100, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -16(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-16(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	je	LBB0_4
## BB#2:
	movl	$4, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-20(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_4
LBB0_3:
	movl	$1, -4(%rbp)
	jmp	LBB0_5
LBB0_4:
	movl	$0, -4(%rbp)
LBB0_5:
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.cfi_endproc

	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp8:
	.cfi_def_cfa_offset 16
Ltmp9:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp10:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
Ltmp11:
	.cfi_offset %rbx, -24
	leaq	L_.str(%rip), %rdi
	leaq	-24(%rbp), %rsi
	leaq	-28(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	leaq	L_main.M(%rip), %rax
	movabsq	$52, %r8
	leaq	-160(%rbp), %r9
	leaq	L_main.m(%rip), %r10
	leaq	-96(%rbp), %r11
	movq	___stack_chk_guard@GOTPCREL(%rip), %rbx
	movq	(%rbx), %rbx
	movq	%rbx, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -36(%rbp)
	movq	%rdi, -168(%rbp)        ## 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -176(%rbp)        ## 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -184(%rbp)        ## 8-byte Spill
	movq	%r8, %rdx
	movq	%r9, -192(%rbp)         ## 8-byte Spill
	movq	%r8, -200(%rbp)         ## 8-byte Spill
	movq	%rax, -208(%rbp)        ## 8-byte Spill
	movq	%rcx, -216(%rbp)        ## 8-byte Spill
	callq	_memcpy
	movq	-192(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	movq	-208(%rbp), %rsi        ## 8-byte Reload
	movq	-200(%rbp), %rdx        ## 8-byte Reload
	callq	_memcpy
	movq	-168(%rbp), %rdi        ## 8-byte Reload
	movq	-176(%rbp), %rsi        ## 8-byte Reload
	movq	-184(%rbp), %rdx        ## 8-byte Reload
	movq	-216(%rbp), %rcx        ## 8-byte Reload
	movb	$0, %al
	callq	_scanf
	movl	-24(%rbp), %edi
	movl	%eax, -220(%rbp)        ## 4-byte Spill
	callq	_LeapYear
	cmpl	$1, %eax
	jne	LBB1_6
## BB#1:
	movl	$0, -44(%rbp)
LBB1_2:                                 ## =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	LBB1_5
## BB#3:                                ##   in Loop: Header=BB1_2 Depth=1
	movl	-36(%rbp), %eax
	movslq	-44(%rbp), %rcx
	addl	-160(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
## BB#4:                                ##   in Loop: Header=BB1_2 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB1_2
LBB1_5:
	jmp	LBB1_6
LBB1_6:
	movl	-24(%rbp), %edi
	callq	_LeapYear
	cmpl	$0, %eax
	jne	LBB1_12
## BB#7:
	movl	$0, -44(%rbp)
LBB1_8:                                 ## =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	LBB1_11
## BB#9:                                ##   in Loop: Header=BB1_8 Depth=1
	movl	-36(%rbp), %eax
	movslq	-44(%rbp), %rcx
	addl	-160(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
## BB#10:                               ##   in Loop: Header=BB1_8 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB1_8
LBB1_11:
	jmp	LBB1_12
LBB1_12:
	leaq	L_.str1(%rip), %rdi
	movl	-36(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	cmpq	-16(%rbp), %rdi
	movl	%eax, -224(%rbp)        ## 4-byte Spill
	jne	LBB1_14
## BB#13:                               ## %SP_return
	movl	$0, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	ret
LBB1_14:                                ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__const
	.align	4                       ## @main.m
L_main.m:
	.long	0                       ## 0x0
	.long	31                      ## 0x1f
	.long	29                      ## 0x1d
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.align	4                       ## @main.M
L_main.M:
	.long	0                       ## 0x0
	.long	31                      ## 0x1f
	.long	29                      ## 0x1d
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d %d %d"

L_.str1:                                ## @.str1
	.asciz	"%d"


.subsections_via_symbols
