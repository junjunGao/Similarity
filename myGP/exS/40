	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	leaq	L_.str(%rip), %rdi
	leaq	-16(%rbp), %rsi
	leaq	L_main.r(%rip), %rax
	movabsq	$52, %rdx
	leaq	-96(%rbp), %rcx
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -36(%rbp)
	movq	%rdi, -104(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -112(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	callq	_memcpy
	movq	-104(%rbp), %rdi        ## 8-byte Reload
	movq	-112(%rbp), %rsi        ## 8-byte Reload
	movb	$0, %al
	callq	_scanf
	leaq	L_.str(%rip), %rdi
	leaq	-20(%rbp), %rsi
	movl	%eax, -116(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_scanf
	leaq	L_.str(%rip), %rdi
	leaq	-24(%rbp), %rsi
	movl	%eax, -120(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_scanf
	movl	$4, %r9d
	movl	-16(%rbp), %r10d
	movl	%eax, -124(%rbp)        ## 4-byte Spill
	movl	%r10d, %eax
	cltd
	idivl	%r9d
	cmpl	$0, %edx
	jne	LBB0_2
## BB#1:
	movl	$100, %eax
	movl	-16(%rbp), %ecx
	movl	%eax, -128(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-128(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_3
LBB0_2:
	movl	$400, %eax              ## imm = 0x190
	movl	-16(%rbp), %ecx
	movl	%eax, -132(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-132(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_4
LBB0_3:
	movl	$29, -88(%rbp)
LBB0_4:
	movl	$1, -28(%rbp)
LBB0_5:                                 ## =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	LBB0_8
## BB#6:                                ##   in Loop: Header=BB0_5 Depth=1
	movl	-36(%rbp), %eax
	movslq	-28(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
## BB#7:                                ##   in Loop: Header=BB0_5 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB0_5
LBB0_8:
	leaq	L_.str(%rip), %rdi
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	cmpq	-8(%rbp), %rdi
	movl	%eax, -136(%rbp)        ## 4-byte Spill
	jne	LBB0_10
## BB#9:                                ## %SP_return
	movl	$0, %eax
	addq	$144, %rsp
	popq	%rbp
	ret
LBB0_10:                                ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__const
	.align	4                       ## @main.r
L_main.r:
	.long	0                       ## 0x0
	.long	31                      ## 0x1f
	.long	28                      ## 0x1c
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d"


.subsections_via_symbols
