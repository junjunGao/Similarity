	.section	__TEXT,__text,regular,pure_instructions
	.globl	_ru
	.align	4, 0x90
_ru:                                    ## @ru
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	movl	$4, %eax
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %edi
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	movl	%edi, %eax
	cltd
	movl	-12(%rbp), %edi         ## 4-byte Reload
	idivl	%edi
	cmpl	$0, %edx
	jne	LBB0_2
## BB#1:
	movl	$100, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -16(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-16(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_3
LBB0_2:
	movl	$400, %eax              ## imm = 0x190
	movl	-8(%rbp), %ecx
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-20(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_4
LBB0_3:
	movl	$1, -4(%rbp)
	jmp	LBB0_5
LBB0_4:
	movl	$0, -4(%rbp)
LBB0_5:
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.cfi_endproc

	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp7:
	.cfi_def_cfa_offset 16
Ltmp8:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp9:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	L_.str(%rip), %rdi
	leaq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	leaq	-16(%rbp), %rcx
	movl	$0, -4(%rbp)
	movl	$0, -24(%rbp)
	movb	$0, %al
	callq	_scanf
	movl	-8(%rbp), %edi
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	callq	_ru
	cmpl	$1, %eax
	jne	LBB1_23
## BB#1:
	movl	$1, -20(%rbp)
LBB1_2:                                 ## =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	LBB1_22
## BB#3:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$1, -20(%rbp)
	je	LBB1_10
## BB#4:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$3, -20(%rbp)
	je	LBB1_10
## BB#5:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$5, -20(%rbp)
	je	LBB1_10
## BB#6:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$7, -20(%rbp)
	je	LBB1_10
## BB#7:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$8, -20(%rbp)
	je	LBB1_10
## BB#8:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$10, -20(%rbp)
	je	LBB1_10
## BB#9:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$12, -20(%rbp)
	jne	LBB1_11
LBB1_10:                                ##   in Loop: Header=BB1_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$31, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB1_20
LBB1_11:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$4, -20(%rbp)
	je	LBB1_15
## BB#12:                               ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$6, -20(%rbp)
	je	LBB1_15
## BB#13:                               ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$9, -20(%rbp)
	je	LBB1_15
## BB#14:                               ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$11, -20(%rbp)
	jne	LBB1_16
LBB1_15:                                ##   in Loop: Header=BB1_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$30, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB1_19
LBB1_16:                                ##   in Loop: Header=BB1_2 Depth=1
	cmpl	$2, -20(%rbp)
	jne	LBB1_18
## BB#17:                               ##   in Loop: Header=BB1_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$29, %eax
	movl	%eax, -24(%rbp)
LBB1_18:                                ##   in Loop: Header=BB1_2 Depth=1
	jmp	LBB1_19
LBB1_19:                                ##   in Loop: Header=BB1_2 Depth=1
	jmp	LBB1_20
LBB1_20:                                ##   in Loop: Header=BB1_2 Depth=1
	jmp	LBB1_21
LBB1_21:                                ##   in Loop: Header=BB1_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB1_2
LBB1_22:
	jmp	LBB1_45
LBB1_23:
	movl	$1, -20(%rbp)
LBB1_24:                                ## =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	LBB1_44
## BB#25:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$1, -20(%rbp)
	je	LBB1_32
## BB#26:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$3, -20(%rbp)
	je	LBB1_32
## BB#27:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$5, -20(%rbp)
	je	LBB1_32
## BB#28:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$7, -20(%rbp)
	je	LBB1_32
## BB#29:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$8, -20(%rbp)
	je	LBB1_32
## BB#30:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$10, -20(%rbp)
	je	LBB1_32
## BB#31:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$12, -20(%rbp)
	jne	LBB1_33
LBB1_32:                                ##   in Loop: Header=BB1_24 Depth=1
	movl	-24(%rbp), %eax
	addl	$31, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB1_42
LBB1_33:                                ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$4, -20(%rbp)
	je	LBB1_37
## BB#34:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$6, -20(%rbp)
	je	LBB1_37
## BB#35:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$9, -20(%rbp)
	je	LBB1_37
## BB#36:                               ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$11, -20(%rbp)
	jne	LBB1_38
LBB1_37:                                ##   in Loop: Header=BB1_24 Depth=1
	movl	-24(%rbp), %eax
	addl	$30, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB1_41
LBB1_38:                                ##   in Loop: Header=BB1_24 Depth=1
	cmpl	$2, -20(%rbp)
	jne	LBB1_40
## BB#39:                               ##   in Loop: Header=BB1_24 Depth=1
	movl	-24(%rbp), %eax
	addl	$28, %eax
	movl	%eax, -24(%rbp)
LBB1_40:                                ##   in Loop: Header=BB1_24 Depth=1
	jmp	LBB1_41
LBB1_41:                                ##   in Loop: Header=BB1_24 Depth=1
	jmp	LBB1_42
LBB1_42:                                ##   in Loop: Header=BB1_24 Depth=1
	jmp	LBB1_43
LBB1_43:                                ##   in Loop: Header=BB1_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB1_24
LBB1_44:
	jmp	LBB1_45
LBB1_45:
	leaq	L_.str1(%rip), %rdi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	$0, %esi
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	movl	%esi, %eax
	addq	$32, %rsp
	popq	%rbp
	ret
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d %d %d"

L_.str1:                                ## @.str1
	.asciz	"%d"


.subsections_via_symbols
