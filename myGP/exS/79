	.section	__TEXT,__text,regular,pure_instructions
	.globl	_runnian
	.align	4, 0x90
_runnian:                               ## @runnian
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	movl	$400, %eax              ## imm = 0x190
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %edi
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	movl	%edi, %eax
	cltd
	movl	-12(%rbp), %edi         ## 4-byte Reload
	idivl	%edi
	cmpl	$0, %edx
	je	LBB0_3
## BB#1:
	movl	$100, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -16(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-16(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	je	LBB0_4
## BB#2:
	movl	$4, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-20(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_4
LBB0_3:
	movl	$1, -4(%rbp)
	jmp	LBB0_5
LBB0_4:
	movl	$0, -4(%rbp)
LBB0_5:
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.cfi_endproc

	.globl	_yue
	.align	4, 0x90
_yue:                                   ## @yue
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp7:
	.cfi_def_cfa_offset 16
Ltmp8:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp9:
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	cmpl	$1, -8(%rbp)
	je	LBB1_7
## BB#1:
	cmpl	$3, -8(%rbp)
	je	LBB1_7
## BB#2:
	cmpl	$5, -8(%rbp)
	je	LBB1_7
## BB#3:
	cmpl	$7, -8(%rbp)
	je	LBB1_7
## BB#4:
	cmpl	$8, -8(%rbp)
	je	LBB1_7
## BB#5:
	cmpl	$10, -8(%rbp)
	je	LBB1_7
## BB#6:
	cmpl	$12, -8(%rbp)
	jne	LBB1_8
LBB1_7:
	movl	$1, -4(%rbp)
	jmp	LBB1_14
LBB1_8:
	cmpl	$4, -8(%rbp)
	je	LBB1_12
## BB#9:
	cmpl	$6, -8(%rbp)
	je	LBB1_12
## BB#10:
	cmpl	$9, -8(%rbp)
	je	LBB1_12
## BB#11:
	cmpl	$11, -8(%rbp)
	jne	LBB1_13
LBB1_12:
	movl	$0, -4(%rbp)
	jmp	LBB1_14
LBB1_13:
	jmp	LBB1_14
LBB1_14:
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.cfi_endproc

	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp12:
	.cfi_def_cfa_offset 16
Ltmp13:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp14:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	L_.str(%rip), %rdi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	leaq	-20(%rbp), %rcx
	movl	$0, -4(%rbp)
	movl	$0, -24(%rbp)
	movb	$0, %al
	callq	_scanf
	cmpl	$2, -16(%rbp)
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	jl	LBB2_2
## BB#1:
	movl	$31, -24(%rbp)
LBB2_2:
	cmpl	$2, -16(%rbp)
	jle	LBB2_9
## BB#3:
	movl	-12(%rbp), %edi
	callq	_runnian
	cmpl	$1, %eax
	jne	LBB2_5
## BB#4:
	movl	-24(%rbp), %eax
	addl	$29, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB2_8
LBB2_5:
	movl	-12(%rbp), %edi
	callq	_runnian
	cmpl	$0, %eax
	jne	LBB2_7
## BB#6:
	movl	-24(%rbp), %eax
	addl	$28, %eax
	movl	%eax, -24(%rbp)
LBB2_7:
	jmp	LBB2_8
LBB2_8:
	jmp	LBB2_9
LBB2_9:
	cmpl	$3, -16(%rbp)
	jle	LBB2_19
## BB#10:
	movl	$3, -8(%rbp)
LBB2_11:                                ## =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	LBB2_18
## BB#12:                               ##   in Loop: Header=BB2_11 Depth=1
	movl	-8(%rbp), %edi
	callq	_yue
	cmpl	$1, %eax
	jne	LBB2_14
## BB#13:                               ##   in Loop: Header=BB2_11 Depth=1
	movl	-24(%rbp), %eax
	addl	$31, %eax
	movl	%eax, -24(%rbp)
LBB2_14:                                ##   in Loop: Header=BB2_11 Depth=1
	movl	-8(%rbp), %edi
	callq	_yue
	cmpl	$0, %eax
	jne	LBB2_16
## BB#15:                               ##   in Loop: Header=BB2_11 Depth=1
	movl	-24(%rbp), %eax
	addl	$30, %eax
	movl	%eax, -24(%rbp)
LBB2_16:                                ##   in Loop: Header=BB2_11 Depth=1
	jmp	LBB2_17
LBB2_17:                                ##   in Loop: Header=BB2_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	LBB2_11
LBB2_18:
	jmp	LBB2_19
LBB2_19:
	leaq	L_.str1(%rip), %rdi
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	$0, %esi
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	movl	%esi, %eax
	addq	$32, %rsp
	popq	%rbp
	ret
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d %d %d"

L_.str1:                                ## @.str1
	.asciz	"%d"


.subsections_via_symbols
