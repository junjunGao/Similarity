	.section	__TEXT,__text,regular,pure_instructions
	.globl	_leap
	.align	4, 0x90
_leap:                                  ## @leap
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	movl	$4, %eax
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %edi
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	movl	%edi, %eax
	cltd
	movl	-12(%rbp), %edi         ## 4-byte Reload
	idivl	%edi
	cmpl	$0, %edx
	jne	LBB0_2
## BB#1:
	movl	$100, %eax
	movl	-8(%rbp), %ecx
	movl	%eax, -16(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-16(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_3
LBB0_2:
	movl	$400, %eax              ## imm = 0x190
	movl	-8(%rbp), %ecx
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-20(%rbp), %ecx         ## 4-byte Reload
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB0_4
LBB0_3:
	movl	$1, -4(%rbp)
	jmp	LBB0_5
LBB0_4:
	movl	$0, -4(%rbp)
LBB0_5:
	movl	-4(%rbp), %eax
	popq	%rbp
	ret
	.cfi_endproc

	.globl	_number
	.align	4, 0x90
_number:                                ## @number
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp7:
	.cfi_def_cfa_offset 16
Ltmp8:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp9:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	leaq	L_number.b(%rip), %rax
	movabsq	$48, %rcx
	leaq	-128(%rbp), %r8
	leaq	L_number.a(%rip), %r9
	leaq	-80(%rbp), %r10
	movq	___stack_chk_guard@GOTPCREL(%rip), %r11
	movq	(%r11), %r11
	movq	%r11, -8(%rbp)
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	$0, -24(%rbp)
	movq	%r10, %rdi
	movq	%r9, %rsi
	movq	%rcx, %rdx
	movq	%rax, -136(%rbp)        ## 8-byte Spill
	movq	%rcx, -144(%rbp)        ## 8-byte Spill
	movq	%r8, -152(%rbp)         ## 8-byte Spill
	callq	_memcpy
	movq	-152(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	movq	-136(%rbp), %rsi        ## 8-byte Reload
	movq	-144(%rbp), %rdx        ## 8-byte Reload
	callq	_memcpy
	movl	-12(%rbp), %edi
	callq	_leap
	cmpl	$1, %eax
	jne	LBB1_6
## BB#1:
	movl	$0, -28(%rbp)
LBB1_2:                                 ## =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	LBB1_5
## BB#3:                                ##   in Loop: Header=BB1_2 Depth=1
	movslq	-28(%rbp), %rax
	movl	-128(%rbp,%rax,4), %ecx
	movl	-24(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, -24(%rbp)
## BB#4:                                ##   in Loop: Header=BB1_2 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB1_2
LBB1_5:
	jmp	LBB1_11
LBB1_6:
	movl	$0, -28(%rbp)
LBB1_7:                                 ## =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	LBB1_10
## BB#8:                                ##   in Loop: Header=BB1_7 Depth=1
	movslq	-28(%rbp), %rax
	movl	-80(%rbp,%rax,4), %ecx
	movl	-24(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, -24(%rbp)
## BB#9:                                ##   in Loop: Header=BB1_7 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB1_7
LBB1_10:
	jmp	LBB1_11
LBB1_11:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %ecx
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	movl	%ecx, -156(%rbp)        ## 4-byte Spill
	jne	LBB1_13
## BB#12:                               ## %SP_return
	movl	-156(%rbp), %eax        ## 4-byte Reload
	addq	$160, %rsp
	popq	%rbp
	ret
LBB1_13:                                ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp12:
	.cfi_def_cfa_offset 16
Ltmp13:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp14:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	L_.str(%rip), %rdi
	leaq	-4(%rbp), %rsi
	leaq	-8(%rbp), %rdx
	leaq	-12(%rbp), %rcx
	movb	$0, %al
	callq	_scanf
	movl	-4(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	callq	_number
	leaq	L_.str1(%rip), %rdi
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	addq	$32, %rsp
	popq	%rbp
	ret
	.cfi_endproc

	.section	__TEXT,__const
	.align	4                       ## @number.a
L_number.a:
	.long	31                      ## 0x1f
	.long	28                      ## 0x1c
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.align	4                       ## @number.b
L_number.b:
	.long	31                      ## 0x1f
	.long	29                      ## 0x1d
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f
	.long	30                      ## 0x1e
	.long	31                      ## 0x1f

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d%d%d"

L_.str1:                                ## @.str1
	.asciz	"%d\n"


.subsections_via_symbols
